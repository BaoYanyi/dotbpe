// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message/qpaper.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Survey.Core {

  /// <summary>Holder for reflection information generated from message/qpaper.proto</summary>
  public static partial class QpaperReflection {

    #region Descriptor
    /// <summary>File descriptor for message/qpaper.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QpaperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRtZXNzYWdlL3FwYXBlci5wcm90bxIGZG90YnBlGhRtZXNzYWdlL2NvbW1v",
            "bi5wcm90byLOAQoNU2F2ZVFQYXBlclJlcRIRCgljbGllbnRfaXAYASABKAkS",
            "EAoIaWRlbnRpdHkYAiABKAkSFAoMeF9yZXF1ZXN0X2lkGAMgASgJEhEKCXFw",
            "YXBlcl9pZBgKIAEoBRIPCgdzdWJqZWN0GAsgASgJEhIKCnN0YXJ0X3RpbWUY",
            "DCABKAkSEAoIZW5kX3RpbWUYDSABKAkSEwoLZGVzY3JpcHRpb24YDiABKAkS",
            "IwoJcXVlc3Rpb25zGA8gAygLMhAuZG90YnBlLlF1ZXN0aW9uIk8KDVNhdmVR",
            "UGFwZXJSc3ASEwoLcmV0dXJuX2NvZGUYASABKAUSFgoOcmV0dXJuX21lc3Nh",
            "Z2UYAiABKAkSEQoJcXBhcGVyX2lkGAogASgFIl8KDlF1ZXJ5UVBhcGVyUmVx",
            "EhEKCWNsaWVudF9pcBgBIAEoCRIQCghpZGVudGl0eRgCIAEoCRIUCgx4X3Jl",
            "cXVlc3RfaWQYAyABKAkSEgoKcXVlcnlfdGV4dBgKIAEoCSJaCg1RUGFwZXJM",
            "aXN0UnNwEhMKC3JldHVybl9jb2RlGAEgASgFEhYKDnJldHVybl9tZXNzYWdl",
            "GAIgASgJEhwKBGxpc3QYCiADKAsyDi5kb3RicGUuUVBhcGVyIlwKDEdldFFQ",
            "YXBlclJlcRIRCgljbGllbnRfaXAYASABKAkSEAoIaWRlbnRpdHkYAiABKAkS",
            "FAoMeF9yZXF1ZXN0X2lkGAMgASgJEhEKCXFwYXBlcl9pZBgKIAEoBSJbCglR",
            "UGFwZXJSc3ASEwoLcmV0dXJuX2NvZGUYASABKAUSFgoOcmV0dXJuX21lc3Nh",
            "Z2UYAiABKAkSIQoGcXBhcGVyGAogASgLMhEuZG90YnBlLkRUT1FQYXBlciJq",
            "CglEVE9RUGFwZXISEQoJcXBhcGVyX2lkGAEgASgFEg8KB3N1YmplY3QYAiAB",
            "KAkSEgoKc3RhcnRfdGltZRgDIAEoCRIQCghlbmRfdGltZRgEIAEoCRITCgtk",
            "ZXNjcmlwdGlvbhgFIAEoCSKPAQoIUXVlc3Rpb24SCgoCaWQYASABKAkSDQoF",
            "dG9waWMYAiABKAkSEAoIcGFwZXJfaWQYAyABKAUSKwoNcXVlc3Rpb25fdHlw",
            "ZRgEIAEoDjIULmRvdGJwZS5RdWVzdGlvblR5cGUSEwoLaXRlbV9kZXRhaWwY",
            "BSABKAkSFAoMZXh0ZW5kX2lucHV0GAYgASgIIowBCgZRUGFwZXISEQoJcXBh",
            "cGVyX2lkGAEgASgFEg8KB3N1YmplY3QYAiABKAkSEgoKc3RhcnRfdGltZRgD",
            "IAEoCRIQCghlbmRfdGltZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIj",
            "CglxdWVzdGlvbnMYCiADKAsyEC5kb3RicGUuUXVlc3Rpb24qOAoMUXVlc3Rp",
            "b25UeXBlEgoKBlNJR05MRRAAEgwKCE1VTFRJUExFEAESDgoKU1VCSkVDVElW",
            "RRACQhBIAaoCC1N1cnZleS5Db3JlUABiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Survey.Core.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Survey.Core.QuestionType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.SaveQPaperReq), global::Survey.Core.SaveQPaperReq.Parser, new[]{ "ClientIp", "Identity", "XRequestId", "QpaperId", "Subject", "StartTime", "EndTime", "Description", "Questions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.SaveQPaperRsp), global::Survey.Core.SaveQPaperRsp.Parser, new[]{ "ReturnCode", "ReturnMessage", "QpaperId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.QueryQPaperReq), global::Survey.Core.QueryQPaperReq.Parser, new[]{ "ClientIp", "Identity", "XRequestId", "QueryText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.QPaperListRsp), global::Survey.Core.QPaperListRsp.Parser, new[]{ "ReturnCode", "ReturnMessage", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.GetQPaperReq), global::Survey.Core.GetQPaperReq.Parser, new[]{ "ClientIp", "Identity", "XRequestId", "QpaperId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.QPaperRsp), global::Survey.Core.QPaperRsp.Parser, new[]{ "ReturnCode", "ReturnMessage", "Qpaper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.DTOQPaper), global::Survey.Core.DTOQPaper.Parser, new[]{ "QpaperId", "Subject", "StartTime", "EndTime", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.Question), global::Survey.Core.Question.Parser, new[]{ "Id", "Topic", "PaperId", "QuestionType", "ItemDetail", "ExtendInput" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Survey.Core.QPaper), global::Survey.Core.QPaper.Parser, new[]{ "QpaperId", "Subject", "StartTime", "EndTime", "Description", "Questions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum QuestionType {
    /// <summary>
    /// 单选
    /// </summary>
    [pbr::OriginalName("SIGNLE")] Signle = 0,
    /// <summary>
    /// 多选
    /// </summary>
    [pbr::OriginalName("MULTIPLE")] Multiple = 1,
    /// <summary>
    /// 主观题
    /// </summary>
    [pbr::OriginalName("SUBJECTIVE")] Subjective = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// -----------start----------服务请求和响应顶层的消息体定义--------------------------------
  ///  什么字段都没有，请求
  /// </summary>
  public sealed partial class SaveQPaperReq : pb::IMessage<SaveQPaperReq> {
    private static readonly pb::MessageParser<SaveQPaperReq> _parser = new pb::MessageParser<SaveQPaperReq>(() => new SaveQPaperReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveQPaperReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveQPaperReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveQPaperReq(SaveQPaperReq other) : this() {
      clientIp_ = other.clientIp_;
      identity_ = other.identity_;
      xRequestId_ = other.xRequestId_;
      qpaperId_ = other.qpaperId_;
      subject_ = other.subject_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      description_ = other.description_;
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveQPaperReq Clone() {
      return new SaveQPaperReq(this);
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 1;
    private string clientIp_ = "";
    /// <summary>
    /// 用户端IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private string identity_ = "";
    /// <summary>
    ///  用户标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x_request_id" field.</summary>
    public const int XRequestIdFieldNumber = 3;
    private string xRequestId_ = "";
    /// <summary>
    /// 请求的唯一标识，用于服务间传递
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XRequestId {
      get { return xRequestId_; }
      set {
        xRequestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qpaper_id" field.</summary>
    public const int QpaperIdFieldNumber = 10;
    private int qpaperId_;
    /// <summary>
    ///  问卷ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QpaperId {
      get { return qpaperId_; }
      set {
        qpaperId_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 11;
    private string subject_ = "";
    /// <summary>
    ///  问卷标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 12;
    private string startTime_ = "";
    /// <summary>
    ///  问卷开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 13;
    private string endTime_ = "";
    /// <summary>
    ///  问卷结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 14;
    private string description_ = "";
    /// <summary>
    ///  注释和说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Survey.Core.Question> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(122, global::Survey.Core.Question.Parser);
    private readonly pbc::RepeatedField<global::Survey.Core.Question> questions_ = new pbc::RepeatedField<global::Survey.Core.Question>();
    /// <summary>
    ///  问题列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Survey.Core.Question> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveQPaperReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveQPaperReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientIp != other.ClientIp) return false;
      if (Identity != other.Identity) return false;
      if (XRequestId != other.XRequestId) return false;
      if (QpaperId != other.QpaperId) return false;
      if (Subject != other.Subject) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Description != other.Description) return false;
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (XRequestId.Length != 0) hash ^= XRequestId.GetHashCode();
      if (QpaperId != 0) hash ^= QpaperId.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientIp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientIp);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (XRequestId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(XRequestId);
      }
      if (QpaperId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(QpaperId);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Subject);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(EndTime);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Description);
      }
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identity);
      }
      if (XRequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XRequestId);
      }
      if (QpaperId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QpaperId);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveQPaperReq other) {
      if (other == null) {
        return;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      if (other.XRequestId.Length != 0) {
        XRequestId = other.XRequestId;
      }
      if (other.QpaperId != 0) {
        QpaperId = other.QpaperId;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClientIp = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 26: {
            XRequestId = input.ReadString();
            break;
          }
          case 80: {
            QpaperId = input.ReadInt32();
            break;
          }
          case 90: {
            Subject = input.ReadString();
            break;
          }
          case 98: {
            StartTime = input.ReadString();
            break;
          }
          case 106: {
            EndTime = input.ReadString();
            break;
          }
          case 114: {
            Description = input.ReadString();
            break;
          }
          case 122: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SaveQPaperRsp : pb::IMessage<SaveQPaperRsp> {
    private static readonly pb::MessageParser<SaveQPaperRsp> _parser = new pb::MessageParser<SaveQPaperRsp>(() => new SaveQPaperRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveQPaperRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveQPaperRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveQPaperRsp(SaveQPaperRsp other) : this() {
      returnCode_ = other.returnCode_;
      returnMessage_ = other.returnMessage_;
      qpaperId_ = other.qpaperId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveQPaperRsp Clone() {
      return new SaveQPaperRsp(this);
    }

    /// <summary>Field number for the "return_code" field.</summary>
    public const int ReturnCodeFieldNumber = 1;
    private int returnCode_;
    /// <summary>
    ///  返回状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "return_message" field.</summary>
    public const int ReturnMessageFieldNumber = 2;
    private string returnMessage_ = "";
    /// <summary>
    /// 返回错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnMessage {
      get { return returnMessage_; }
      set {
        returnMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qpaper_id" field.</summary>
    public const int QpaperIdFieldNumber = 10;
    private int qpaperId_;
    /// <summary>
    ///  保存后的问卷ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QpaperId {
      get { return qpaperId_; }
      set {
        qpaperId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveQPaperRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveQPaperRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReturnCode != other.ReturnCode) return false;
      if (ReturnMessage != other.ReturnMessage) return false;
      if (QpaperId != other.QpaperId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReturnCode != 0) hash ^= ReturnCode.GetHashCode();
      if (ReturnMessage.Length != 0) hash ^= ReturnMessage.GetHashCode();
      if (QpaperId != 0) hash ^= QpaperId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReturnCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReturnCode);
      }
      if (ReturnMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReturnMessage);
      }
      if (QpaperId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(QpaperId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReturnCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnCode);
      }
      if (ReturnMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnMessage);
      }
      if (QpaperId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QpaperId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveQPaperRsp other) {
      if (other == null) {
        return;
      }
      if (other.ReturnCode != 0) {
        ReturnCode = other.ReturnCode;
      }
      if (other.ReturnMessage.Length != 0) {
        ReturnMessage = other.ReturnMessage;
      }
      if (other.QpaperId != 0) {
        QpaperId = other.QpaperId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReturnCode = input.ReadInt32();
            break;
          }
          case 18: {
            ReturnMessage = input.ReadString();
            break;
          }
          case 80: {
            QpaperId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  查询问卷的请求
  /// </summary>
  public sealed partial class QueryQPaperReq : pb::IMessage<QueryQPaperReq> {
    private static readonly pb::MessageParser<QueryQPaperReq> _parser = new pb::MessageParser<QueryQPaperReq>(() => new QueryQPaperReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryQPaperReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryQPaperReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryQPaperReq(QueryQPaperReq other) : this() {
      clientIp_ = other.clientIp_;
      identity_ = other.identity_;
      xRequestId_ = other.xRequestId_;
      queryText_ = other.queryText_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryQPaperReq Clone() {
      return new QueryQPaperReq(this);
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 1;
    private string clientIp_ = "";
    /// <summary>
    /// 用户端IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private string identity_ = "";
    /// <summary>
    ///  用户标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x_request_id" field.</summary>
    public const int XRequestIdFieldNumber = 3;
    private string xRequestId_ = "";
    /// <summary>
    /// 请求的唯一标识，用于服务间传递
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XRequestId {
      get { return xRequestId_; }
      set {
        xRequestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query_text" field.</summary>
    public const int QueryTextFieldNumber = 10;
    private string queryText_ = "";
    /// <summary>
    /// 过滤标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryText {
      get { return queryText_; }
      set {
        queryText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryQPaperReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryQPaperReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientIp != other.ClientIp) return false;
      if (Identity != other.Identity) return false;
      if (XRequestId != other.XRequestId) return false;
      if (QueryText != other.QueryText) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (XRequestId.Length != 0) hash ^= XRequestId.GetHashCode();
      if (QueryText.Length != 0) hash ^= QueryText.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientIp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientIp);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (XRequestId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(XRequestId);
      }
      if (QueryText.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(QueryText);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identity);
      }
      if (XRequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XRequestId);
      }
      if (QueryText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryText);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryQPaperReq other) {
      if (other == null) {
        return;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      if (other.XRequestId.Length != 0) {
        XRequestId = other.XRequestId;
      }
      if (other.QueryText.Length != 0) {
        QueryText = other.QueryText;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClientIp = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 26: {
            XRequestId = input.ReadString();
            break;
          }
          case 82: {
            QueryText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  查询问卷的列表
  /// </summary>
  public sealed partial class QPaperListRsp : pb::IMessage<QPaperListRsp> {
    private static readonly pb::MessageParser<QPaperListRsp> _parser = new pb::MessageParser<QPaperListRsp>(() => new QPaperListRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QPaperListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaperListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaperListRsp(QPaperListRsp other) : this() {
      returnCode_ = other.returnCode_;
      returnMessage_ = other.returnMessage_;
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaperListRsp Clone() {
      return new QPaperListRsp(this);
    }

    /// <summary>Field number for the "return_code" field.</summary>
    public const int ReturnCodeFieldNumber = 1;
    private int returnCode_;
    /// <summary>
    ///  返回状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "return_message" field.</summary>
    public const int ReturnMessageFieldNumber = 2;
    private string returnMessage_ = "";
    /// <summary>
    /// 返回错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnMessage {
      get { return returnMessage_; }
      set {
        returnMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Survey.Core.QPaper> _repeated_list_codec
        = pb::FieldCodec.ForMessage(82, global::Survey.Core.QPaper.Parser);
    private readonly pbc::RepeatedField<global::Survey.Core.QPaper> list_ = new pbc::RepeatedField<global::Survey.Core.QPaper>();
    /// <summary>
    /// 列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Survey.Core.QPaper> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QPaperListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QPaperListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReturnCode != other.ReturnCode) return false;
      if (ReturnMessage != other.ReturnMessage) return false;
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReturnCode != 0) hash ^= ReturnCode.GetHashCode();
      if (ReturnMessage.Length != 0) hash ^= ReturnMessage.GetHashCode();
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReturnCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReturnCode);
      }
      if (ReturnMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReturnMessage);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReturnCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnCode);
      }
      if (ReturnMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnMessage);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QPaperListRsp other) {
      if (other == null) {
        return;
      }
      if (other.ReturnCode != 0) {
        ReturnCode = other.ReturnCode;
      }
      if (other.ReturnMessage.Length != 0) {
        ReturnMessage = other.ReturnMessage;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReturnCode = input.ReadInt32();
            break;
          }
          case 18: {
            ReturnMessage = input.ReadString();
            break;
          }
          case 82: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  获取单个问卷的请求
  /// </summary>
  public sealed partial class GetQPaperReq : pb::IMessage<GetQPaperReq> {
    private static readonly pb::MessageParser<GetQPaperReq> _parser = new pb::MessageParser<GetQPaperReq>(() => new GetQPaperReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQPaperReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQPaperReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQPaperReq(GetQPaperReq other) : this() {
      clientIp_ = other.clientIp_;
      identity_ = other.identity_;
      xRequestId_ = other.xRequestId_;
      qpaperId_ = other.qpaperId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQPaperReq Clone() {
      return new GetQPaperReq(this);
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 1;
    private string clientIp_ = "";
    /// <summary>
    /// 用户端IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 2;
    private string identity_ = "";
    /// <summary>
    ///  用户标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identity {
      get { return identity_; }
      set {
        identity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x_request_id" field.</summary>
    public const int XRequestIdFieldNumber = 3;
    private string xRequestId_ = "";
    /// <summary>
    /// 请求的唯一标识，用于服务间传递
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XRequestId {
      get { return xRequestId_; }
      set {
        xRequestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qpaper_id" field.</summary>
    public const int QpaperIdFieldNumber = 10;
    private int qpaperId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QpaperId {
      get { return qpaperId_; }
      set {
        qpaperId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQPaperReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQPaperReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientIp != other.ClientIp) return false;
      if (Identity != other.Identity) return false;
      if (XRequestId != other.XRequestId) return false;
      if (QpaperId != other.QpaperId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (Identity.Length != 0) hash ^= Identity.GetHashCode();
      if (XRequestId.Length != 0) hash ^= XRequestId.GetHashCode();
      if (QpaperId != 0) hash ^= QpaperId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientIp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientIp);
      }
      if (Identity.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Identity);
      }
      if (XRequestId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(XRequestId);
      }
      if (QpaperId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(QpaperId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (Identity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identity);
      }
      if (XRequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XRequestId);
      }
      if (QpaperId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QpaperId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQPaperReq other) {
      if (other == null) {
        return;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.Identity.Length != 0) {
        Identity = other.Identity;
      }
      if (other.XRequestId.Length != 0) {
        XRequestId = other.XRequestId;
      }
      if (other.QpaperId != 0) {
        QpaperId = other.QpaperId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ClientIp = input.ReadString();
            break;
          }
          case 18: {
            Identity = input.ReadString();
            break;
          }
          case 26: {
            XRequestId = input.ReadString();
            break;
          }
          case 80: {
            QpaperId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  包括单个问卷信息的响应
  /// </summary>
  public sealed partial class QPaperRsp : pb::IMessage<QPaperRsp> {
    private static readonly pb::MessageParser<QPaperRsp> _parser = new pb::MessageParser<QPaperRsp>(() => new QPaperRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QPaperRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaperRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaperRsp(QPaperRsp other) : this() {
      returnCode_ = other.returnCode_;
      returnMessage_ = other.returnMessage_;
      Qpaper = other.qpaper_ != null ? other.Qpaper.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaperRsp Clone() {
      return new QPaperRsp(this);
    }

    /// <summary>Field number for the "return_code" field.</summary>
    public const int ReturnCodeFieldNumber = 1;
    private int returnCode_;
    /// <summary>
    ///  返回状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "return_message" field.</summary>
    public const int ReturnMessageFieldNumber = 2;
    private string returnMessage_ = "";
    /// <summary>
    /// 返回错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnMessage {
      get { return returnMessage_; }
      set {
        returnMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qpaper" field.</summary>
    public const int QpaperFieldNumber = 10;
    private global::Survey.Core.DTOQPaper qpaper_;
    /// <summary>
    /// 问卷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Survey.Core.DTOQPaper Qpaper {
      get { return qpaper_; }
      set {
        qpaper_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QPaperRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QPaperRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReturnCode != other.ReturnCode) return false;
      if (ReturnMessage != other.ReturnMessage) return false;
      if (!object.Equals(Qpaper, other.Qpaper)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReturnCode != 0) hash ^= ReturnCode.GetHashCode();
      if (ReturnMessage.Length != 0) hash ^= ReturnMessage.GetHashCode();
      if (qpaper_ != null) hash ^= Qpaper.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReturnCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReturnCode);
      }
      if (ReturnMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReturnMessage);
      }
      if (qpaper_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Qpaper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReturnCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnCode);
      }
      if (ReturnMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnMessage);
      }
      if (qpaper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Qpaper);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QPaperRsp other) {
      if (other == null) {
        return;
      }
      if (other.ReturnCode != 0) {
        ReturnCode = other.ReturnCode;
      }
      if (other.ReturnMessage.Length != 0) {
        ReturnMessage = other.ReturnMessage;
      }
      if (other.qpaper_ != null) {
        if (qpaper_ == null) {
          qpaper_ = new global::Survey.Core.DTOQPaper();
        }
        Qpaper.MergeFrom(other.Qpaper);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReturnCode = input.ReadInt32();
            break;
          }
          case 18: {
            ReturnMessage = input.ReadString();
            break;
          }
          case 82: {
            if (qpaper_ == null) {
              qpaper_ = new global::Survey.Core.DTOQPaper();
            }
            input.ReadMessage(qpaper_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 简化的QPaper 消息
  /// </summary>
  public sealed partial class DTOQPaper : pb::IMessage<DTOQPaper> {
    private static readonly pb::MessageParser<DTOQPaper> _parser = new pb::MessageParser<DTOQPaper>(() => new DTOQPaper());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DTOQPaper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DTOQPaper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DTOQPaper(DTOQPaper other) : this() {
      qpaperId_ = other.qpaperId_;
      subject_ = other.subject_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DTOQPaper Clone() {
      return new DTOQPaper(this);
    }

    /// <summary>Field number for the "qpaper_id" field.</summary>
    public const int QpaperIdFieldNumber = 1;
    private int qpaperId_;
    /// <summary>
    ///  问卷ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QpaperId {
      get { return qpaperId_; }
      set {
        qpaperId_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    /// <summary>
    ///  问卷标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private string startTime_ = "";
    /// <summary>
    ///  问卷开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private string endTime_ = "";
    /// <summary>
    ///  问卷结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///  注释和说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DTOQPaper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DTOQPaper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QpaperId != other.QpaperId) return false;
      if (Subject != other.Subject) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QpaperId != 0) hash ^= QpaperId.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QpaperId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(QpaperId);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EndTime);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QpaperId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QpaperId);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DTOQPaper other) {
      if (other == null) {
        return;
      }
      if (other.QpaperId != 0) {
        QpaperId = other.QpaperId;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QpaperId = input.ReadInt32();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            StartTime = input.ReadString();
            break;
          }
          case 34: {
            EndTime = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Question : pb::IMessage<Question> {
    private static readonly pb::MessageParser<Question> _parser = new pb::MessageParser<Question>(() => new Question());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Question> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Question() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Question(Question other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      paperId_ = other.paperId_;
      questionType_ = other.questionType_;
      itemDetail_ = other.itemDetail_;
      extendInput_ = other.extendInput_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Question Clone() {
      return new Question(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// 问题ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    /// <summary>
    /// 标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paper_id" field.</summary>
    public const int PaperIdFieldNumber = 3;
    private int paperId_;
    /// <summary>
    /// 问卷ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaperId {
      get { return paperId_; }
      set {
        paperId_ = value;
      }
    }

    /// <summary>Field number for the "question_type" field.</summary>
    public const int QuestionTypeFieldNumber = 4;
    private global::Survey.Core.QuestionType questionType_ = 0;
    /// <summary>
    /// 问题类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Survey.Core.QuestionType QuestionType {
      get { return questionType_; }
      set {
        questionType_ = value;
      }
    }

    /// <summary>Field number for the "item_detail" field.</summary>
    public const int ItemDetailFieldNumber = 5;
    private string itemDetail_ = "";
    /// <summary>
    /// 问题详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemDetail {
      get { return itemDetail_; }
      set {
        itemDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extend_input" field.</summary>
    public const int ExtendInputFieldNumber = 6;
    private bool extendInput_;
    /// <summary>
    /// 是否自定义输入，只有在单选题 有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtendInput {
      get { return extendInput_; }
      set {
        extendInput_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Question);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Question other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (PaperId != other.PaperId) return false;
      if (QuestionType != other.QuestionType) return false;
      if (ItemDetail != other.ItemDetail) return false;
      if (ExtendInput != other.ExtendInput) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (PaperId != 0) hash ^= PaperId.GetHashCode();
      if (QuestionType != 0) hash ^= QuestionType.GetHashCode();
      if (ItemDetail.Length != 0) hash ^= ItemDetail.GetHashCode();
      if (ExtendInput != false) hash ^= ExtendInput.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (PaperId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PaperId);
      }
      if (QuestionType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) QuestionType);
      }
      if (ItemDetail.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ItemDetail);
      }
      if (ExtendInput != false) {
        output.WriteRawTag(48);
        output.WriteBool(ExtendInput);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (PaperId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaperId);
      }
      if (QuestionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QuestionType);
      }
      if (ItemDetail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemDetail);
      }
      if (ExtendInput != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Question other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.PaperId != 0) {
        PaperId = other.PaperId;
      }
      if (other.QuestionType != 0) {
        QuestionType = other.QuestionType;
      }
      if (other.ItemDetail.Length != 0) {
        ItemDetail = other.ItemDetail;
      }
      if (other.ExtendInput != false) {
        ExtendInput = other.ExtendInput;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 24: {
            PaperId = input.ReadInt32();
            break;
          }
          case 32: {
            questionType_ = (global::Survey.Core.QuestionType) input.ReadEnum();
            break;
          }
          case 42: {
            ItemDetail = input.ReadString();
            break;
          }
          case 48: {
            ExtendInput = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QPaper : pb::IMessage<QPaper> {
    private static readonly pb::MessageParser<QPaper> _parser = new pb::MessageParser<QPaper>(() => new QPaper());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QPaper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Survey.Core.QpaperReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaper(QPaper other) : this() {
      qpaperId_ = other.qpaperId_;
      subject_ = other.subject_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      description_ = other.description_;
      questions_ = other.questions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QPaper Clone() {
      return new QPaper(this);
    }

    /// <summary>Field number for the "qpaper_id" field.</summary>
    public const int QpaperIdFieldNumber = 1;
    private int qpaperId_;
    /// <summary>
    ///  问卷ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QpaperId {
      get { return qpaperId_; }
      set {
        qpaperId_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    /// <summary>
    ///  问卷标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private string startTime_ = "";
    /// <summary>
    ///  问卷开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private string endTime_ = "";
    /// <summary>
    ///  问卷结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///  注释和说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "questions" field.</summary>
    public const int QuestionsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Survey.Core.Question> _repeated_questions_codec
        = pb::FieldCodec.ForMessage(82, global::Survey.Core.Question.Parser);
    private readonly pbc::RepeatedField<global::Survey.Core.Question> questions_ = new pbc::RepeatedField<global::Survey.Core.Question>();
    /// <summary>
    ///  问题列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Survey.Core.Question> Questions {
      get { return questions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QPaper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QPaper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QpaperId != other.QpaperId) return false;
      if (Subject != other.Subject) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Description != other.Description) return false;
      if(!questions_.Equals(other.questions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QpaperId != 0) hash ^= QpaperId.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (EndTime.Length != 0) hash ^= EndTime.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= questions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QpaperId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(QpaperId);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StartTime);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EndTime);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      questions_.WriteTo(output, _repeated_questions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QpaperId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QpaperId);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += questions_.CalculateSize(_repeated_questions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QPaper other) {
      if (other == null) {
        return;
      }
      if (other.QpaperId != 0) {
        QpaperId = other.QpaperId;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime.Length != 0) {
        EndTime = other.EndTime;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      questions_.Add(other.questions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            QpaperId = input.ReadInt32();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            StartTime = input.ReadString();
            break;
          }
          case 34: {
            EndTime = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 82: {
            questions_.AddEntriesFrom(input, _repeated_questions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
