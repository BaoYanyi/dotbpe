// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/inner/qpaper_inner.proto
#region Designer generated code

using System; 
using System.Threading.Tasks; 
using DotBPE.Rpc; 
using DotBPE.Protocol.Amp; 
using DotBPE.Rpc.Exceptions; 
using Google.Protobuf; 

namespace Survey.Core {

//start for class QPaperInnerServiceClient
public sealed class QPaperInnerServiceClient : AmpInvokeClient 
{
public QPaperInnerServiceClient(IRpcClient<AmpMessage> client) : base(client)
{
}
public QPaperInnerServiceClient(string remoteAddress) : base(remoteAddress)
{
}
public async Task<SaveQPaperRsp> SaveQPaperAsync(SaveQPaperReq request,int timeOut=3000)
{
AmpMessage message = AmpMessage.CreateRequestMessage(20001, 1);
message.Data = request.ToByteArray();
var response = await base.CallInvoker.AsyncCall(message,timeOut);
if (response == null)
{
throw new RpcException("error,response is null !");
}
if (response.Data == null)
{
return new SaveQPaperRsp();
}
return SaveQPaperRsp.Parser.ParseFrom(response.Data);
}

//同步方法
public SaveQPaperRsp SaveQPaper(SaveQPaperReq request)
{
AmpMessage message = AmpMessage.CreateRequestMessage(20001, 1);
message.Data = request.ToByteArray();
var response =  base.CallInvoker.BlockingCall(message);
if (response == null)
{
throw new RpcException("error,response is null !");
}
if (response.Data == null)
{
return new SaveQPaperRsp();
}
return SaveQPaperRsp.Parser.ParseFrom(response.Data);
}
public async Task<QPaperListRsp> QueryQPaperListAsync(QueryQPaperReq request,int timeOut=3000)
{
AmpMessage message = AmpMessage.CreateRequestMessage(20001, 2);
message.Data = request.ToByteArray();
var response = await base.CallInvoker.AsyncCall(message,timeOut);
if (response == null)
{
throw new RpcException("error,response is null !");
}
if (response.Data == null)
{
return new QPaperListRsp();
}
return QPaperListRsp.Parser.ParseFrom(response.Data);
}

//同步方法
public QPaperListRsp QueryQPaperList(QueryQPaperReq request)
{
AmpMessage message = AmpMessage.CreateRequestMessage(20001, 2);
message.Data = request.ToByteArray();
var response =  base.CallInvoker.BlockingCall(message);
if (response == null)
{
throw new RpcException("error,response is null !");
}
if (response.Data == null)
{
return new QPaperListRsp();
}
return QPaperListRsp.Parser.ParseFrom(response.Data);
}
public async Task<QPaperRsp> GetQPaperAsync(GetQPaperReq request,int timeOut=3000)
{
AmpMessage message = AmpMessage.CreateRequestMessage(20001, 3);
message.Data = request.ToByteArray();
var response = await base.CallInvoker.AsyncCall(message,timeOut);
if (response == null)
{
throw new RpcException("error,response is null !");
}
if (response.Data == null)
{
return new QPaperRsp();
}
return QPaperRsp.Parser.ParseFrom(response.Data);
}

//同步方法
public QPaperRsp GetQPaper(GetQPaperReq request)
{
AmpMessage message = AmpMessage.CreateRequestMessage(20001, 3);
message.Data = request.ToByteArray();
var response =  base.CallInvoker.BlockingCall(message);
if (response == null)
{
throw new RpcException("error,response is null !");
}
if (response.Data == null)
{
return new QPaperRsp();
}
return QPaperRsp.Parser.ParseFrom(response.Data);
}
}
//end for class QPaperInnerServiceClient
}
#endregion
