using Google.Protobuf.Compiler;
using Google.Protobuf.Reflection;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DotBPE.ProtobufPlugin
{
    public class DotbpeGen
    {
        public static void Generate(CodeGeneratorRequest request, CodeGeneratorResponse response)
        {           
            foreach (var protofile in request.ProtoFile)
            {
                GenerateByProtoFile(protofile, response);

                var nfile = new CodeGeneratorResponse.Types.File();
                nfile.Name = protofile.Name + ".json";

                string content = "";
                foreach (var service in protofile.Service)
                {
                    int serviceId;
                    service.Options.CustomOptions.TryGetInt32(10000, out serviceId);
                    content = string.Format("serviceName={0},serviceId={1}", service.Name, serviceId);

                }

                nfile.Content = content;
                response.File.Add(nfile);
            }
        }
        private static void GenerateByProtoFile(FileDescriptorProto protofile, CodeGeneratorResponse response)
        {

            GenerateServer(protofile, response);
            GenerateClient(protofile, response);

        }
        private static void GenerateServer(FileDescriptorProto protofile, CodeGeneratorResponse response)
        {
            if (protofile.Service != null && protofile.Service.Count > 0)
            {
                //生成文件头
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("// Generated by the protocol buffer compiler.  DO NOT EDIT!");
                sb.AppendLine($"// source: {protofile.Name}");
                //还可以生成注释

                sb.AppendLine("// #region Designer generated code");
                sb.AppendLine("");
                sb.AppendLine("using System; ");
                sb.AppendLine("using System.Threading.Tasks; ");
                sb.AppendLine("using DotBPE.Protocol.Amp; ");
                sb.AppendLine("using DotBPE.Rpc.Exceptions; ");
                sb.AppendLine("using Google.Protobuf; ");
                sb.AppendLine("");

                string ns = GetFileNamespace(protofile);
                sb.AppendLine("namespace " + ns + " {");
                //生成代码
                for (var i = 0; i < protofile.Service.Count; i++)
                {
                    GenerateServiceForServer(protofile.Service[i], sb);
                }
                sb.AppendLine("}\n");
                sb.AppendLine("#endregion\n");
            }

        }
        private static void GenerateClient(FileDescriptorProto protofile, CodeGeneratorResponse response)
        {
            if (protofile.Service != null && protofile.Service.Count > 0)
            {
                //生成文件头
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("// Generated by the protocol buffer compiler.  DO NOT EDIT!");
                sb.AppendLine($"// source: {protofile.Name}");
                //还可以生成注释

                sb.AppendLine("// #region Designer generated code");
                sb.AppendLine("");
                sb.AppendLine("using System; ");
                sb.AppendLine("using System.Threading.Tasks; ");
                sb.AppendLine("using DotBPE.Protocol.Amp; ");
                sb.AppendLine("using DotBPE.Rpc.Exceptions; ");
                sb.AppendLine("using Google.Protobuf; ");
                sb.AppendLine("");

                string ns = GetFileNamespace(protofile);
                sb.AppendLine("namespace " + ns + " {");
                //生成代码
                for (var i = 0; i < protofile.Service.Count; i++)
                {
                    GenerateServiceForClient(protofile.Service[i], sb);
                }
                sb.AppendLine("}\n");
                sb.AppendLine("#endregion\n");
            }

        }

        private static void GenerateServiceForClient(ServiceDescriptorProto serviceDescriptorProto, StringBuilder sb)
        {
            sb.AppendLine("//服务");

            /*
             public sealed class GreeterClient : AmpInvokeClient
    {
        public GreeterClient(IMessageSender<AmpMessage> sender) : base(sender)
        {

        }

        public async Task<HelloResponse> HelloPlusAsnyc(HelloRequest request)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(100, 1);
            message.Data = request.ToByteArray();

            var response = await base.CallInvoker.AsyncCall(message);
            if (response != null && response.Data !=null)
            {
               return HelloResponse.Parser.ParseFrom(response.Data);
            }
            throw new RpcException("请求出错，请检查!");
        }

        public HelloResponse HelloPlus(HelloRequest request)
        {
            AmpMessage message = AmpMessage.CreateRequestMessage(100, 1);
            message.Data = request.ToByteArray();

            var response = base.CallInvoker.BlockingCall(message);
            if (response != null && response.Data != null)
            {
                return HelloResponse.Parser.ParseFrom(response.Data);
            }
            throw new RpcException("请求出错，请检查!");
        }
    }
             */
        }
        private static void GenerateServiceForServer(ServiceDescriptorProto serviceDescriptorProto, StringBuilder sb)
        {
            throw new NotImplementedException();
        }
        private static string GetFileNamespace(FileDescriptorProto protofile)
        {
            throw new NotImplementedException();
        }        
    }
}
